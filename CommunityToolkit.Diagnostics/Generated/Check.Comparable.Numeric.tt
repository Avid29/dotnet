// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
<#@include file="TypeInfo.ttinclude" #>
using System;
using System.Runtime.CompilerServices;

namespace CommunityToolkit.Diagnostics;

/// <inheritdoc/>
partial class Check
{
<#
GenerateTextForItems(NumericTypes, typeInfo =>
{
var (type, prefix) = typeInfo;
#>
    /// <summary>
    /// Checks that the input value must be equal to a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="target">The target <see <#=prefix#>="<#=type#>"/> value to test for.</param>
    /// <returns><see langword="true"/> if <paramref name="value"/> is equal to <paramref name="target"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsEqualTo(<#=type#> value, <#=type#> target)
    {
        return value == target;
    }

    /// <summary>
    /// Checks that the input value must be not equal to a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="target">The target <see <#=prefix#>="<#=type#>"/> value to test for.</param>
    /// <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is not equal to <paramref name="target"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsNotEqualTo(<#=type#> value, <#=type#> target)
    {
        return value != target;
    }

    /// <summary>
    /// Checks that the input value must be less than a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="maximum">The exclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is less than <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsLessThan(<#=type#> value, <#=type#> maximum)
    {
        return value < maximum;
    }

    /// <summary>
    /// Checks that the input value must be less than or equal to a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="maximum">The inclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is less than or equal to <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsLessThanOrEqualTo(<#=type#> value, <#=type#> maximum)
    {
        return value <= maximum;
    }

    /// <summary>
    /// Checks that the input value must be greater than a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The exclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is greater than <paramref name="minimum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsGreaterThan(<#=type#> value, <#=type#> minimum)
    {
        return value > minimum;
    }

    /// <summary>
    /// Checks that the input value must be greater than or equal to a specified value.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The inclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>The method is generic to avoid boxing the parameters, if they are value types.</remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is greater than or equal to <paramref name="minimum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsGreaterThanOrEqualTo(<#=type#> value, <#=type#> minimum)
    {
        return value >= minimum;
    }

    /// <summary>
    /// Checks that the input value must be in a given range.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The inclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The exclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is within the range <paramref name="minimum"/> to <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsInRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value >= minimum && value < maximum;
    }

    /// <summary>
    /// Checks that the input value must not be in a given range.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The inclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The exclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is not within the range <paramref name="minimum"/> to <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsNotInRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value < minimum || value >= maximum;
    }

    /// <summary>
    /// Checks that the input value must be in a given interval.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The exclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The exclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is between <paramref name="minimum"/> and <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsBetween(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value > minimum && value < maximum;
    }

    /// <summary>
    /// Checks that the input value must not be in a given interval.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The exclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The exclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is not between <paramref name="minimum"/> and <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsNotBetween(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value <= minimum || value >= maximum;
    }

    /// <summary>
    /// Checks that the input value must be in a given interval.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The inclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The inclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is between or equal to <paramref name="minimum"/> and <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsBetweenOrEqualTo(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value >= minimum && value <= maximum;
    }

    /// <summary>
    /// Checks that the input value must not be in a given interval.
    /// </summary>
    /// <param name="value">The input <see <#=prefix#>="<#=type#>"/> value to test.</param>
    /// <param name="minimum">The inclusive minimum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <param name="maximum">The inclusive maximum <see <#=prefix#>="<#=type#>"/> value that is accepted.</param>
    /// <remarks>
    /// This API Checks the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
    /// The method is generic to avoid boxing the parameters, if they are value types.
    /// </remarks>
    /// <returns><see langword="true"/> if <paramref name="value"/> is not between or equal to <paramref name="minimum"/> and <paramref name="maximum"/>, <see langword="false"/> otherwise.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool IsNotBetweenOrEqualTo(<#=type#> value, <#=type#> minimum, <#=type#> maximum)
    {
        return value < minimum || value > maximum;
    }
<#
});
#>
}
